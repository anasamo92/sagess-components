
import TestUtils from 'react-addons-test-utils';
import React from 'react';
import ReactDOM from 'react-dom';

import storeConnectBehaviour from '../connect';
const { renderIntoDocument, Simulate } = TestUtils;

import store from 'focus-core/store';
import dispatcher from 'focus-core/dispatcher';
const { CoreStore } = store;


describe('The store connect behaviour', () => {
    describe('when called without storeConf', () => {
        it('should throw an error', () => {
            expect(() => storeConnectBehaviour()).toThrow('connectToStores: you need to provide an array of store config.');
        });
    });
    describe('when called without getState', () => {
        it('should throw an error', () => {
            expect(() => storeConnectBehaviour([])).toThrow('connectToStores: you need to provide function to read state from store.');
        });
    });
    describe('when called with correct argument', () => {
        it('should return a function', () => {
            expect(() => storeConnectBehaviour([], () => { })).toBeInstanceOf(Function);
        });
    });
    describe('when called with a store', () => {
        let renderComponent;
        let storeChangeSpy;
        let conectedComponentRenderSpy;
        beforeEach(
            () => {
                storeChangeSpy = jest.fn();
                conectedComponentRenderSpy = jest.fn();
                const newStore = new CoreStore({ definition: { papa: 'papa', lopez: 'lopez' } });
                const connector = storeConnectBehaviour(
                    [{ store: newStore, properties: ['papa', 'lopez'] }],
                    (props) => { const storeValue = newStore.getValue(); storeChangeSpy(storeValue); return storeValue; }
                );
                const Component = (props) => { conectedComponentRenderSpy(props); return <div>{JSON.stringify(props)}</div>; };
                const ConnectedComponent = connector(Component);

                renderComponent = renderIntoDocument(<ConnectedComponent testProps='testPropsValue' />);
            }
        );
        it('should call the getState method on mounting', () => {
            expect(storeChangeSpy).toHaveBeenCalledTimes(1);
            expect(storeChangeSpy).toHaveBeenCalledWith({});
            expect(conectedComponentRenderSpy).toHaveBeenCalledTimes(1);
            expect(conectedComponentRenderSpy).toHaveBeenCalledWith({ isLoading: false, testProps: 'testPropsValue' });
        });
        describe('when a value with two nodes is dispatched', () => {
            beforeEach(() => {
                jest.useFakeTimers();

                dispatcher.handleViewAction({
                    data: {
                        lopez: 'joe',
                        papa: 'singe'
                    },
                    type: 'update'
                });
                jest.runAllTimers();

            });
            it.skip('the store change spy should have been called twice', () => {
                expect(storeChangeSpy).toHaveBeenCalledTimes(4); //Initial, DidMount, joe, singe
            });
            it.skip('the component shoud have been rendered twice', () => {
                expect(conectedComponentRenderSpy).toHaveBeenCalledTimes(4);
            });
            it('the html generated by the component should contains props and state', () => {
                const domNode = ReactDOM.findDOMNode(renderComponent);
                expect(JSON.parse(domNode.innerHTML)).toEqual({ isLoading: false, lopez: 'joe', papa: 'singe', testProps: 'testPropsValue' });
            });
        });

    });
});
